const Token = "7079092015:AAFOhQM0L0PGWmKcfW2DULtjo0KHzBEHbz8";
        const chatId = "7355777672";
        const admin = "5560083488";

        const bulanLalu = new Date();
        bulanLalu.setMonth(bulanLalu.getMonth() -1 );
        const namaFile = `Absensi_${bulanLalu.toLocaleString('id-ID', {month: 'Long', year: 'numeric'})}.xlsx`;

        let formData = new FormData();
        formData.append("chat_id", chatId);
        formData.append("document", new File([new Blob([XLSX.write(absensiData, { type: 'array' })])], namaFile, { type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" }));
        formData.append("caption", `Laporan Absensi Bulan Lalu: ${namaFile}`);

        fetch(`https://api.telegram.org/bot${Token}/sendDocument`, {
            method: "POST",
            body: formData
        }).then(response => response.json)
        .then(data => {
            if (data.ok) {
                let sendAdmin = `✅ Laporan Absensi Bulan ${bulanLalu.toLocaleString('id-ID', {month: 'long', year: 'numeric'})} Berhasil Di Kirim`;
            } else {
                let sendAdmin = `❌ Laporan Tidak Berhasil Di Kirim ${data.description}`;
            };
        
            // kirim api
            fetch(`https://api.telegram.org/bot${telegramBotToken}/sendMessage`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    chat_id: admin,
                    text: sendAdmin
                })
            })
        }).catch(error => {
            fetch(`https://api.telegram.org/bot${telegramBotToken}/sendMessage`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    chat_id: admin,
                    text: `❌ Laporan Tidak Berhasil Di Kirim ${error.message}`
                })
            })
        })
        
        function cekDataTele() {
            const now = new Date();
            if (now.getDate() === 1) {
                sendDataExcelTele();
            }
        }
        setInterval(cekDataTele, 3600000)













        try {
            stream = await navigator.mediaDevices.getUserMedia({
                video: {
                    width: { ideal: 1280 },
                    height: { ideal: 720 },
                    facingMode: "user"
                }
            });
            video.srcObject = stream; 
            video.classList.remove("d-none");
            sendAbsensi.classList.remove("d-none");
            sendAbsensi.innerHTML = "📸 Ambil Foto";
            sendAbsensi.onclick = capturePhoto;
            
        } catch (error) {
            alert("Gagal mengakses kamera: " + error);
        }
    
        


        async function posisiAnda(position) {
            let letak1 = position.coords.latitude,
                letak2 = position.coords.longitude;

            let BatasLokasiAccess =[
                {lat: -6.970946, lng: 110.018758}, // titik batas lokasi yang di izinkan 1. -6.970946,110.018758
                {lat: -6.970872, lng: 110.018765}, // titik batas lokasi yang di izinkan 2. -6.970872,110.018765
                {lat: -6.970860, lng: 110.018706}, // titik batas lokasi yang di izinkan 3. -6.970860,110.018706
                {lat: -6.970945, lng: 110.018698}  // titik batas lokasi yang di izinkan 4. -6.970945,110.018698
            ];

            let maxRadius = 5; // 5 meter
            let dalamLokasiAccess = BatasLokasiAccess.some(openCamera => 
                hitungJarak(letak1, letak2, openCamera.lat, openCamera.lng) <= maxRadius
            );

            Swal.close();

            if (dalamLokasiAccess) {
                await Swal.fire({
                    title: "Menyiapkan Kamera!",
                    text: "Harap Tunggu Sebentar!",
                    allowOutsideClick: false,
                    didOpen: () => Swal.showLoading(),
                    timer: 3000,
                    timerProgressBar: true
                }).then(() => {
                    Swal.fire({
                        imageUrl: "../pic/icon/LokasiTepat.svg",
                        customClass: {
                            image: "Swal-image-responsive"
                        },
                        title: "Lokasi Valid",
                        text: "Apakah Anda Ingin Lanjut Absensi?",
                        showCancelButton: true,
                        confirmButtonColor: "#3085d6",
                        cancelButtonColor: "#d33",
                        confirmButtonText: "Lanjut Absen",
                    }).then((result) => {
                        if (result.isConfirmed) {
                            StartKamera();
                        }
                    });
                });
            } else {
                Swal.fire({
                    imageUrl: "../pic/icon/LokasiGedung.svg",
                    text: "Di Luar Lokasi!",
                    imageAlt: "Lokasi Gedung",
                    customClass: {
                        image: "Swal-image-responsive"
                    }
                });
            }

        },
        function (error) {
            let errorCode;

            switch (errorCode) {
                case error.PERMISSION_DENIED:
                    Swal.fire({
                        title: "Lokasi Belum Di Izinkan!",
                        text: "Silahkan Izinkan Access Lokasi Anda!",
                        imageUrl: "../pic/icon/Waning.svg",
                        imageAlt: "Izin Lokasi",
                        customClass: {
                            image: "Swal-image-responsive"
                        }
                    });
                    break;
                // kondisi kedua 
                case error.POSITION_UNAVAILABLE:
                    Swal.fire({
                        title: "Lokasi Tidak Ditemuakn!",
                        text: "Silahkan refresh halaman!",
                        imageUrl: "../pic/icon/LokasiAnda.svg",
                        imageAlt: "Lokasi Tidak Ditemuakn!",
                        customClass: {
                            image: "Swal-image-responsive"
                        }
                    });
                    break;
                // Kondisi kedua
                case error.TIMEOUT:
                    Swal.fire({
                        title: "Koneksi Teganggu",
                        text: "Silahkan koneksikan jaringan yang cepat!",
                        imageUrl: "../pic/icon/ServerError.svg",
                        imageAlt: "Koneksi Terganggu!",
                        customClass: {
                            image: "Swal-image-responsive"
                        }
                    })
                    break;
                // Kondisi Awal atau (Default)
                default:
                    Swal.fire({
                        icon: "warning",
                        title: "Terjadi Kesalah Tidak Terduga!",
                        text: "Silahkan hubungi pembuat situs!"
                    });
            }

            Swal.fire({
                title: "Kesalahan Lokasi!",
                text: errorCode,
                icon: "error"
            });

            resolve(false);
        }
    );
} else {
    Swal.fire({
        title: "Broser tidak mendukung lokasi!",
        text: "Geolocation tidak di dukung di broser ini!",
        icon: "warning"
    });
    resolve(false);
}
}












async function cekLokasiSaya() {
    return new Promise((resolve, reject) => {
        if ("geolocation" in navigator) {
            Swal.fire({
                title: "Mencari Lokasi",
                text: "Mohon tunggu sebentar...",
                allowOutsideClick: false,
                didOpen: () => Swal.showLoading()
            });

            navigator.geolocation.getCurrentPosition(
                async function (position) {
                    await posisiAnda(position);
                    resolve(true);
                },
                function (error) {
                    let errorMessage;
                    switch (error.code) {
                        case error.PERMISSION_DENIED:
                            errorMessage = "Silakan izinkan akses lokasi Anda!";
                            break;
                        case error.POSITION_UNAVAILABLE:
                            errorMessage = "Lokasi tidak dapat ditemukan!";
                            break;
                        case error.TIMEOUT:
                            errorMessage = "Waktu pencarian lokasi habis!";
                            break;
                        default:
                            errorMessage = "Terjadi kesalahan tidak terduga!";
                    }
                    Swal.fire({
                        title: "Kesalahan Lokasi!",
                        text: errorMessage,
                        icon: "error"
                    });
                    reject(false);
                }
            );
        } else {
            Swal.fire({
                title: "Browser Tidak Mendukung",
                text: "Geolocation tidak didukung di browser ini!",
                icon: "warning"
            });
            reject(false);
        }
    });
}

async function posisiAnda(position) {
    let letak1 = position.coords.latitude,
        letak2 = position.coords.longitude;

    let BatasLokasiAccess = [
        { lat: -6.970946, lng: 110.018758 },
        { lat: -6.970872, lng: 110.018765 },
        { lat: -6.970860, lng: 110.018706 },
        { lat: -6.970945, lng: 110.018698 }
    ];

    let maxRadius = 5; // 5 meter
    let dalamLokasiAccess = BatasLokasiAccess.some(openCamera => 
        hitungJarak(letak1, letak2, openCamera.lat, openCamera.lng) <= maxRadius
    );

    Swal.close();

    if (dalamLokasiAccess) {
        await Swal.fire({
            title: "Menyiapkan Kamera!",
            text: "Harap tunggu sebentar...",
            allowOutsideClick: false,
            didOpen: () => Swal.showLoading(),
            timer: 3000,
            timerProgressBar: true
        });

        const result = await Swal.fire({
            imageUrl: "../pic/icon/LokasiTepat.svg",
            customClass: {
                image: "Swal-image-responsive"
            },
            title: "Lokasi Valid",
            text: "Apakah Anda Ingin Lanjut Absensi?",
            showCancelButton: true,
            confirmButtonColor: "#3085d6",
            cancelButtonColor: "#d33",
            confirmButtonText: "Lanjut Absen"
        });

        if (result.isConfirmed) {
            StartKamera();
        }
    } else {
        Swal.fire({
            imageUrl: "../pic/icon/LokasiGedung.svg",
            text: "Di Luar Lokasi!",
            imageAlt: "Lokasi Gedung",
            customClass: {
                image: "Swal-image-responsive"
            }
        });
    }
}

// Fungsi untuk menghitung jarak antara dua titik koordinat dalam meter
function hitungJarak(lat1, lon1, lat2, lon2) {
    const R = 6371000; // Radius bumi dalam meter
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLon = (lon2 - lon1) * Math.PI / 180;
    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
              Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
              Math.sin(dLon / 2) * Math.sin(dLon / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c; // Jarak dalam meter
}

// Contoh pemanggilan fungsi cek lokasi
cekLokasiSaya().then(() => {
    console.log("Cek lokasi selesai.");
}).catch(() => {
    console.log("Cek lokasi gagal.");
});
